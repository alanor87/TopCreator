import mongoose, { Schema, model, InferSchemaType } from "mongoose";
import dotenv from "dotenv";
import { createHash } from "./utils.js";

dotenv.config();
const { DB_URI = "" } = process.env;

const addressSchema = new mongoose.Schema({
  line1: { type: String, required: true },
  line2: { type: String, required: true },
  postcode: { type: String, required: true },
  city: { type: String, required: true },
  state: { type: String, required: true },
  country: { type: String, required: true },
});

const customersSchema = new Schema({
  firstName: {
    type: String,
    required: true,
  },
  lastName: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
  },
  address: addressSchema,
  createdAt: {
    type: Date,
    default: Date.now(),
  },
});

/** Separate interface for the client model, adding the anonymisation mwthod to the schema. */
interface ICustomerAnonymised extends InferSchemaType<typeof customersSchema> {
  anonymisePrivateData(): void;
}
/** Embedded method for private data anonymisation. */
customersSchema.methods.anonymisePrivateData = function() {

  this.firstName = createHash(this.firstName);
  this.lastName = createHash(this.lastName);
  this.email =
    createHash(this.email.split("@")[0]) + "@" + this.email.split("@")[1];
  this.address.line1 = createHash(this.address.line1);
  this.address.line2 = createHash(this.address.line2);
  this.address.postcode = createHash(this.address.postcode);
};

/** One schema is used for both customer and customer anonymised models. */
const Customer = model("customers", customersSchema);
const CustomerAnonymised = model<ICustomerAnonymised>(
  "customers_anonymised",
  customersSchema,
  "customers_anonymised" // prevention of the incorrect plural collection name, autogenerated by mongoDB.
);

const mongoDBconnection = mongoose.connect(DB_URI);

mongoose.connection.on("connected", () => {
  console.log("MongoDB connection open.");
});
mongoose.connection.on("disconnected", () => {
  console.log("MongoDB connection closed.");
});
mongoose.connection.on("error", () => {
  console.log("MongoDB connection error.");
});

export { mongoDBconnection, Customer, CustomerAnonymised };
